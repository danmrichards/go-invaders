package cpu

// conditions represents the condition bits of the Intel 8080.
//
// Condition bits are used to reflect the results of data operations, they can
// be effectively considered as flags.
type conditions struct {
	// Carry bit is set and reset by certain data operations, and its status can
	// be directly tested by a program. The operations which affect the Carry
	// bit are addition, subtraction, rotate, and logical operations.
	cy bool

	// Auxiliary Carry bit indicates carry out of bit 3. The state of the
	// Auxiliary Carry bit cannot be directly tested by a program instruction
	// and is present only to enable one instruction (DAA).
	ac bool

	// Sign bit is set at the conclusion of certain instructions, it will be set
	// to the condition of the most significant bit of the answer (bit 7).
	s bool

	// Zero bit is set if the result generated by the execution of certain
	// instructions is zero. The Zero bit is reset if the result is not zero.
	z bool

	// Parity bit is set to 1 for even parity, and is reset to 0 for odd parity.
	// Byte "parity" is checked after certain operations. The number of 1 bits
	// in a byte are counted, and if the total is odd, "odd" parity is flagged;
	// if the total is even, "even" parity is flagged.
	p bool
}

// newConditions returns an initialised set of CPU conditions.
func newConditions() *conditions {
	return &conditions{
		z:  true,
		s:  true,
		p:  true,
		cy: true,
		ac: true,
	}
}

// setParity sets the parity bit based upon the number of set bits in byte b.
func (c *conditions) setParity(b byte) {
	var n int

	// Iterate through the bits in the given byte and count how many are set.
	for i := 0; i < 8; i++ {
		if (b>>i)&0x1 == 1 {
			n++
		}
	}

	// Set parity based on the number of set bits being even.
	c.p = n%2 == 0
}
